
"""
    3. Реализовать программу работы с органическими клетками.
    Необходимо создать класс Клетка.
    В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
    В классе должны быть реализованы методы перегрузки арифметических операторов:
    сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
    Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
    (не целочисленное) деление клеток, соответственно.
    В методе деления должно осуществляться округление значения до целого числа.

    - Сложение.
     Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

    - Вычитание.
    Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
     иначе выводить соответствующее сообщение.

    - Умножение.
    Создается общая клетка из двух.
     Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

    - Деление.
    Создается общая клетка из двух.
     Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

    В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
     Данный метод позволяет организовать ячейки по рядам.
    Метод должен возвращать строку вида *****\n*****\n*****...,
     где количество ячеек между \n равно переданному аргументу.
      Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

    Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
     Тогда метод make_order() вернет строку: *****\n*****\n**.
    Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
     Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:
    def __init__(self, cell_count=1):
        self.cell_count = cell_count

    def __str__(self):
        return str(self.cell_count)

    def __add__(self, other):
        z = self.cell_count + other.cell_count
        return Cell(z)

    def __sub__(self, other):
        if abs(self.cell_count - other.cell_count) > 0:
            return Cell(abs(self.cell_count - other.cell_count))

        else:
            return 'Вычитание равно 0'

    def __mul__(self, other):
        return Cell(self.cell_count * other.cell_count)

    def __truediv__(self, other):
        return Cell(int(self.cell_count/other.cell_count))

    def make_order(self, cls, cnt=5):
        string = ''
        cell_cnt = cls.cell_count
        c = 0
        while cell_cnt > 0:
            cell_cnt -= 1
            string += '*'
            c += 1
            if cell_cnt == 0:
                break
            if cnt == c:
                string += '\n'
                c = 0

        return string


c1 = Cell(5)
c2 = Cell(5)
c3 = c1 + c2
c4 = c1 - c2
c5 = c1 * c2
c6 = c1 / c2

print('+', c3)
print('-', c4)
print('*', c5)
print('/', c6)
print(c1.make_order(c5))
