#"""
#1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
#"""

#def func1(a, b):
#  try:
#    return a/b
#  except ZeroDivisionError:
#    print('ZeroDivisionError')
#    
#func1(int(input()), int(input()))


"""
2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.
"""

#def func2(name, surname, email, phone):
#    print(f'name: {name}',
#          f'surname: {surname}',
#          f'email: {email}',
#          f'phone: {phone}')

#func2(input(), input(), input(), input())


#"""
#3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.
#"""

#def func3(a):
#    return int(a.pop(a.index(max(a))))+int(a.pop(a.index(max(a))))
#   
#print(func3([input() for i in range(3)]))


#"""
#4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
#Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
#"""

#def func4(x, y):
#    return x**y

#def func4_1(x, y):
#    x1 = x
#    for _ in range(y-1):
#        x *= x1
#    return x

#x = int(input('Введите число'))
#y = int(input('Введите степень'))
#print(func4(x, y), func4_1(x, y))


#5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

#def num_sum(*x):
#    sum = 0
#    for i in x[0]:
#        if i is set:
#            i = num_sum(i)
#        print (i)
#        sum += int(i)
#    return sum


# special = input()
#special = '*'
#sum = 0

#while True:
#    # raw_inp = input().split(' ')
#    raw_inp = [str(i) for i in range(9)]
#    print(raw_inp)
#    
#    if raw_inp[0] == special:
#        break

#    elif special in raw_inp:
#        sum += num_sum(raw_inp[:raw_inp.index(special)])
#        
#    else:
#        sum += num_sum(raw_inp)
#    
#    print('sum: ', sum)


#6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
#Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

def title_first(x):
    return x[0].upper()+x[1:]
    
while True:
    raw_inp = input().split(' ')
    priprint(' '.join([title_first(i) for i in raw_inp])
